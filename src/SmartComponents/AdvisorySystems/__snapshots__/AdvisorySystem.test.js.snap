// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AdvisorySystems.js Should match the snapshots and dispatch FETCH_AFFECTED_SYSTEMS only once 1`] = `
<Provider
  store={
    {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <BrowserRouter>
    <Router
      location={
        {
          "hash": "",
          "key": "default",
          "pathname": "/",
          "search": "",
          "state": null,
        }
      }
      navigationType="POP"
      navigator={
        {
          "action": "POP",
          "createHref": [Function],
          "createURL": [Function],
          "encodeLocation": [Function],
          "go": [Function],
          "listen": [Function],
          "location": {
            "hash": "",
            "key": "default",
            "pathname": "/",
            "search": "",
            "state": null,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
       
      <AdvisorySystems
        advisoryName="RHSA-2020:2755"
      >
        <mockConstructor
          activeFiltersConfig={
            {
              "deleteTitle": "Reset filters",
              "filters": [],
              "onDelete": [Function],
            }
          }
          autoRefresh={true}
          bulkSelect={
            {
              "checked": null,
              "isDisabled": false,
              "items": [
                {
                  "onClick": [Function],
                  "title": "Select none (0)",
                },
                {
                  "onClick": [Function],
                  "title": "Select page (2)",
                },
                {
                  "onClick": [Function],
                  "title": "Select all (2)",
                },
              ],
              "onSelect": [Function],
              "toggleProps": {
                "children": "     1 selected",
                "data-ouia-component-type": "bulk-select-toggle-button",
              },
            }
          }
          columns={[Function]}
          customFilters={
            {
              "patchParams": {
                "filter": undefined,
                "search": undefined,
                "selectedTags": undefined,
                "systemProfile": undefined,
              },
            }
          }
          dedicatedAction={
            <AsyncRemediationButton
              isDisabled={false}
              remediationProvider={[Function]}
            />
          }
          exportConfig={
            {
              "isDisabled": false,
              "onSelect": [Function],
            }
          }
          filterConfig={
            {
              "items": [
                {
                  "filterValues": {
                    "aria-label": "search-field",
                    "onChange": [Function],
                    "placeholder": "Filter by name",
                    "value": undefined,
                  },
                  "label": "System",
                  "type": "text",
                },
                {
                  "filterValues": {
                    "items": [
                      {
                        "label": "Installable",
                        "value": "Installable",
                      },
                      {
                        "label": "Applicable",
                        "value": "Applicable",
                      },
                    ],
                    "onChange": [Function],
                    "placeholder": "Filter by status",
                    "value": undefined,
                  },
                  "label": "Status",
                  "type": "checkbox",
                },
              ],
            }
          }
          getEntities={[Function]}
          hideFilters={
            {
              "all": true,
              "operatingSystem": false,
              "tags": false,
            }
          }
          ignoreRefresh={true}
          initialLoading={true}
          isFullView={true}
          onLoad={[Function]}
          paginationProps={
            {
              "isDisabled": false,
            }
          }
          showTags={true}
          tableProps={
            {
              "actionResolver": [Function],
              "canSelectAll": false,
              "className": "patchCompactInventory",
              "isStickyHeader": true,
              "variant": "compact",
            }
          }
        >
          <div
            className="testInventroyComponentChild"
          >
            <div>
              This is child
            </div>
          </div>
        </mockConstructor>
      </AdvisorySystems>
    </Router>
  </BrowserRouter>
</Provider>
`;

exports[`AdvisorySystems.js Should open remediation modal 1`] = `
<AsyncRemediationButton
  isDisabled={false}
  remediationProvider={[Function]}
/>
`;
